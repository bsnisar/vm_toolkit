#!/bin/bash
#
# PGVERSION is the full package version, e.g., 9.4.0
# Note: the specfile inserts the correct value during package build
PGVERSION=9.4.8
# PGMAJORVERSION is major version, e.g., 9.4 (this should match PG_VERSION)
PGMAJORVERSION=9.6
# PGENGINE is the directory containing the postmaster executable
# Note: the specfile inserts the correct value during package build
PGENGINE=/usr/pgsql-$PGMAJORVERSION/bin


# note that these options are useful at least for help2man processing
case "$1" in
    --version)
	echo "postgresql-setup $PGVERSION"
        exit 0
        ;;
esac

# this parsing technique fails for PGDATA pathnames containing spaces,
# but there's not much I can do about it given systemctl's output format...
PGDATA=/var/lib/pgsql/data/
# Log file for initdb
PGLOG=/var/lib/pgsql/$PGMAJORVERSION/initdb.log
# Server log
PGSRVLOG=/var/log/pgsql
# initdb options
PGSETUP_INITDB_OPTIONS="-E 'UTF-8' --lc-collate='en_US.UTF-8' --lc-ctype='en_US.UTF-8'"
# init sql script
PGINIT_SQL="${CFGDIR}/smartstab_user_init.sql"

export PGDATA

SU=su

script_result=0

perform_initdb(){
    if [ ! -e "$PGDATA" ]; then
        mkdir "$PGDATA" || return 1
        chown postgres:postgres "$PGDATA"
        chmod go-rwx "$PGDATA"
    fi

    # Initialize the database
    initdbcmd="$PGENGINE/initdb --pgdata='$PGDATA' --auth='ident'"
    initdbcmd+=" $PGSETUP_INITDB_OPTIONS"

    $SU -l postgres -c "$initdbcmd" >> "$PGLOG" 2>&1 < /dev/null
}

perform_start_db(){
    # Create directory for postmaster log files
    if [ ! -e "$PGSRVLOG" ]; then
        mkdir -p "$PGSRVLOG" || return 1
        chown postgres:postgres "$PGSRVLOG"
        chmod go-rwx "$PGSRVLOG"
    fi    

    # Initialize the database
    startdbcmd="$PGENGINE/pg_ctl --pgdata='$PGDATA' -t 300 -w -t 300 -l ${PGSRVLOG}/logfile -o '-p 5432' start"

    $SU -l postgres -c "$startdbcmd" >> "$PGLOG" 2>&1 < /dev/null
}

perform_stop_db(){
    $SU -l postgres -c "$PGENGINE/pg_ctl stop" >> "$PGLOG" 2>&1 < /dev/null
}

perform_create_user(){
    # Create directory for postmaster log files
    if [ ! -e "$PGINIT_SQL" ]; then
		echo "init sql not found in $PGINIT_SQL"
        return 1
    fi    

    # Initialize a user with role
	psqlcmd="psql -f $PGINIT_SQL"
	$SU -l postgres -c "$psqlcmd"
}

initdb(){
    if [ -f "$PGDATA/PG_VERSION" ]; then
        echo $"Data directory is not empty!"
        echo
        script_result=1
    else
        echo -n $"Initializing database ..."
        if perform_initdb; then
			echo
            echo $"OK"
        else
            echo $"failed"
            script_result=1
        fi
        echo
    fi
}

startdb(){
        echo -n $"Starting server ... "
        if perform_start_db; then
			echo 
            echo $"OK"
        else
            echo $"failed, see $PGLOG"
            script_result=1
        fi
        echo
}

stopdb(){
        echo -n $"Stoping server ... "
        if perform_stop_db; then
            echo 
            echo $"OK"
        else
            echo $"failed, see $PGLOG"
            script_result=1
        fi
        echo
}

createuser(){
        echo -n $"Creating smartstub database ... "
        if perform_create_user; then
			echo
            echo $"OK"
        else
            echo $"failed, see $PGLOG"
            script_result=1
        fi
        echo
}

# See how we were called.
case "$1" in
    initdb)
        initdb
        ;;
	startdb)
		startdb
		;;
    stopdb)
        startdb
        ;;
	createuser)
		createuser
		;;
    *)
        echo >&2 "$USAGE_STRING"
        exit 2
esac

exit $script_result
